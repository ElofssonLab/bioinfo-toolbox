#!/usr/bin/env python
# 
# 
import sys,re,os,math;
import myfunc ;

INIT_DGSCORE=954235;

usage="""
Usage: fastaSeqAddGapOpenArray.py [Options] [-i] fastaFile
Options:
  -o         <file> : set the output file
  -topo      <file> : set the topoWithDGScoreFile, generated by topoAddDGscore.py
  -dgscan    <file> : set the dgscan file, the dgscan file is output by myscanDG.pl
  -h|--help         : print this help message and exit

Created 2010-09-10, updated 2010-09-27, Nanjiang
"""

def PrintHelp():
    print usage;

def ReadDGScan(inFile):
# return dgscanList indexID
# indexID is a hash table to quickly locate the index of
# dgscanList given the id
    dgscanList=[];
    indexID={};
    fpin = open(inFile, "r");
    lines = fpin.readlines();
    fpin.close();
    i = 0;
    cntRecord = 0;
    while i < len(lines):
        line = lines[i];
        if line.find("#SeqID") == 0:
            dgscanList.append({});
            dgscanList[cntRecord]['id'] = line.split(':')[1].strip();
            i+=1;

            while i < len(lines):
                line = lines[i];
                if line.find("#SeqLength") ==0:
                    dgscanList[cntRecord]['length']=int(line.split(':')[1].strip()); 
                elif line.find("#L") ==0:
                    dgscanList[cntRecord]['L']=int(line.split(':')[1].strip()); 
                elif line.find("#Number of sliding windows") ==0:
                    dgscanList[cntRecord]['numdata']=int(line.split(':')[1].strip()); 
                elif line[0] != '#':
                    break;
                i+=1;

            dgscanList[cntRecord]['seqindex'] = [];
            dgscanList[cntRecord]['dgscores'] = [];
            for j in range(dgscanList[cntRecord]['numdata']):
                line = lines[i+j];
                strs=line.split();
                dgscanList[cntRecord]['seqindex'].append(int(strs[0]));
                dgscanList[cntRecord]['dgscores'].append(float(strs[1]));
            i+= dgscanList[cntRecord]['numdata'];
            
            indexID[dgscanList[cntRecord]['id']]=(cntRecord);
            cntRecord+=1;
        i+=1;
    return (dgscanList, indexID);

def GetGapOpenValuesFromDGScan(dgscanList):
#return gapopenList
    gapopenList=[];
    for i in range (len(dgscanList)):
        gos=[];
        seqLength=dgscanList[i]['length'];
        seqIndex=dgscanList[i]['seqindex'];
        dgscores=dgscanList[i]['dgscores'];

        gos = [10.0] * seqLength;

        for j in range(len(seqIndex)):
                dg = dgscores[j];
                pinsertion = 1-1/(1+math.exp(-(dg-0.5)));
                gos[seqIndex[j]] = (10+ 30*pinsertion)/1.0;
        gapopenList.append([]);
        gapopenList[i] = gos;
    return gapopenList;


def ReadTopoWithDGScore(inFile):#{{{
# return topoAlnWithDGScoreList indexID2
# indexID2 is a hash table to quickly locate the index of
# topoWithDGScoreList given the id2
    topoWithDGScoreList=[];
    indexID={};
    fpin = open(inFile, "r");
    lines = fpin.readlines();
    fpin.close();
    i = 0;
    cntAlign = 0;
    while i < len(lines):
        line = lines[i];
        if line[0] == '>':
            topoWithDGScoreList.append({});
            annoLine=lines[i].lstrip(">").strip();
            topo=lines[i+1].strip();
            dgscores=lines[i+2].replace("/","").split();
            dgscores=[float(dg) for dg in dgscores];

            seqID=myfunc.GetSeqIDFromAnnotation(annoLine);

            topoWithDGScoreList[cntAlign]['annoline'] = annoLine; 
            topoWithDGScoreList[cntAlign]['id'] = seqID; 
            topoWithDGScoreList[cntAlign]['topo'] = topo; 
            topoWithDGScoreList[cntAlign]['dgscores'] = dgscores; 
            indexID[seqID]=(cntAlign);
            cntAlign+=1;
            i=i+1
        i+=1;
    return (topoWithDGScoreList, indexID);
#}}}
def GetGapOpenValues(topoWithDGScoreList):#{{{
#return gapopenList
    gapopenList=[];
    for i in range (len(topoWithDGScoreList )):
        gos=[];
        topo=topoWithDGScoreList[i]['topo'];
        dgscores=topoWithDGScoreList[i]['dgscores'];
        m=re.finditer("(M+)", topo);
        start=[];
        end=[];
        for jr in m:
            start.append(jr.start(0));
            end.append(jr.end(0));

        gos = [10.0] * len(topo);

        for j in range(len(start)):
            for k in range (max(0,start[j]-1), min(end[j]+1, len(topo))):
                dg = topoWithDGScoreList[i]['dgscores'][j];
                pinsertion = 1-1/(1+math.exp(-(dg-0.5))); 
                gos[k] = (10+ 30*pinsertion)/1.0;
        gapopenList.append([]);
        gapopenList[i] = gos;
    return gapopenList;
#}}}
def WriteFastaWithGapopen(annotationListSeq, seqList, gapopenList,fpout):#{{{
    for i in range(len(annotationListSeq)) :
        fpout.write(">%s\n"%annotationListSeq[i]);
        fpout.write("%s\n"%seqList[i]);
        fpout.write("{");
        for j in range(len(gapopenList[i])):
            fpout.write("%.1f "%gapopenList[i][j]);
        fpout.write("}\n");
    return 0;
#}}}
if __name__ == '__main__' :
    # Check argv
    numArgv=len(sys.argv)
    if numArgv < 2:
        PrintHelp();
        sys.exit(1);

    outFile="";
    topoWithDGScoreFile="";  
    dgscanFile="";
    fastaFile="";

    i = 1;
    isNonOptionArg=False
    while i < numArgv:
        if isNonOptionArg == True:
            isNonOptionArg=False;
            i = i + 1;
        elif sys.argv[i] == "--":
            isNonOptionArg=True;
            i = i + 1;
        elif sys.argv[i][0] == "-":
            if sys.argv[i] ==  "-h" or  sys.argv[i] == "--help":
                PrintHelp();
                sys.exit(0);
            elif sys.argv[i] ==  "-i" or  sys.argv[i] == "--infile":
                fastaFile=sys.argv[i+1];
                i+=2;
            elif sys.argv[i] ==  "-topo" or  sys.argv[i] == "--topo":
                topoWithDGScoreFile=sys.argv[i+1];
                i+=2;
            elif sys.argv[i] ==  "-dgscan" or  sys.argv[i] == "--dgscan":
                dgscanFile=sys.argv[i+1];
                i+=2;
            elif sys.argv[i] ==  "-o" or  sys.argv[i] == "--outfile":
                outFile=sys.argv[i+1];
                i+=2;
            else:
                print >> sys.stderr,("Error! Wrong argument:%s" % sys.argv[i]);
                sys.exit(1);
        else:
            fastaFile=sys.argv[i];
            i+=1;
           

    if fastaFile == "":
        print >> sys.stderr,"Error! fastaFile not set.";
        sys.exit(1);
    if topoWithDGScoreFile == "" and dgscanFile == "":
        print >> sys.stderr,"Error! Either topoWithDGScoreFile or dgscanFile should be set.";
        sys.exit(1);
    if topoWithDGScoreFile != "" and dgscanFile != "":
        print >> sys.stderr,"Error! Only one of the topoWithDGScoreFile and dgscanFile can be set.";
        sys.exit(1);

    fpout = sys.stdout;
    if outFile != "":
        fpout = open(outFile,"w");

    try :
        gapopenList = [];
        topoWithDGScoreList = [];
        (idListSeq, annotationListSeq, seqList) = myfunc.ReadFasta(fastaFile);
        if topoWithDGScoreFile != "":
            (topoWithDGScoreList , indexID)= ReadTopoWithDGScore(topoWithDGScoreFile);
            gapopenList = GetGapOpenValues(topoWithDGScoreList);
            if not (len(gapopenList) == len(idListSeq) and len(gapopenList)  == len(topoWithDGScoreList)):
                print >> sys.stderr, "length mismatch";
                print >> sys.stderr, "len(gapopenList)=",len(gapopenList);
                print >> sys.stderr, "len(idListSeq)=",len(idListSeq);
                print >> sys.stderr, "len(topoWithDGScoreList)=",len(topoWithDGScoreList);
                sys.exit(1);
        elif dgscanFile != "":
            (dgscanList, indexID)= ReadDGScan(dgscanFile);
            gapopenList = GetGapOpenValuesFromDGScan(dgscanList);
            if not (len(gapopenList) == len(idListSeq) and len(gapopenList)  == len(dgscanList)):
                print >> sys.stderr, "length mismatch";
                print >> sys.stderr, "len(gapopenList)=",len(gapopenList);
                print >> sys.stderr, "len(idListSeq)=",len(idListSeq);
                print >> sys.stderr, "len(dgscanList)=",len(dgscanList);
                sys.exit(1);


        WriteFastaWithGapopen(annotationListSeq, seqList, gapopenList,fpout);

        if fpout != sys.stdout:
            fpout.close();

    except :
        print >>sys.stderr, "except for the function:%s"%sys._getframe().f_code.co_name ;
        raise ;
