configfile: "config.yaml"

# It is best practice to have subsequent steps of a workflow in
# separate, unique, output folders. This keeps the working directory
# structured. Further, such unique prefixes allow Snakemake to prune
# the search space for dependencies.

# Trick to run many jobs in parallell
# while I= read -r i ; do snakemake --cores 8 -p $i ; done < foo.txt
#


#envvars:
#    "LC_NUMERIC='en_US.UTF-8'"


#rule all:
#  input: ["{dataset}/file.A.txt".format(dataset=dataset) for dataset in DATASETS]

workdir: config['workdir']
jhparams=config['jhparams']
dockq=config['dockq']
bind=config['bind']
SingImage=config['SingImage']
trRosettaPath=config['trRosettaPath']
cns_solve=config['cns_solve']
modelpath=config['modelpath']


# An uggly hack because I do not know how to pas commands with curly brackets to snakemake
gawk1="gawk '{print $1}'"
gawk2="gawk '{print $2}'"
gawk3="gawk '{print $3}'"
gawk4="gawk '{print $4}'"
gawk5="gawk '{print $5}'"
gawk6="gawk '{print $6}'"
gawk7="gawk '{print $7}'"
gawk8="gawk '{print $8}'"
gawk9="gawk '{print $9}'"
gawk10="gawk '{print $10}'"
gawk11="gawk '{print $11}'"
gawk12="gawk '{print $12}'"
gawk13="gawk '{print $13}'"
gawk14="gawk '{print $14}'"

gawk3if="gawk '{ if ( $2 != \"Query:\" )  print $3  ;  else  print '0'}'"
gawk3hh="gawk '{ if ( $1 != \"Query\" )  print $3  ;  else  print '0'}'"
gawk4hh="gawk '{ if ( $1 != \"Query\" )  print $3  ;  else  print '9999'}'"
gawk6hh="gawk '{ if ( $1 != \"Query\" )  print $3  ;  else  print '0'}'"
gawk11if="gawk '{ if ( $11>0 )  print $11  ;  else  print '9999'}'"



rule jackhmmer:
    input:
        "seq/{seq}.fasta"
    output:
        "msa/{seq}.sto" 
    shell:
        "jackhmmer  {jhparams} -A {output} {input}   ~/Downloads/originalrefproteomes.fasta  "

rule mergedfastanosep:
    input:
        "dimer/{seq}.trimmed"
    output:
        "dimer/{seq}_nosep.fa"
    shell:
        "head -2 {input} | sed 's/GGGGGGGGGGGGGGGGGGGG//g' >{output}"

rule mergedfasta2:
    input:
        "dimer/{seq}.trimmed"
    output:
        a="dimer/{seq}_merged.fa",
        b="dimer/{seq}_multimerged.fa"
    shell:
        "head -2 {input} | sed 's/GGGGGGGGGGGGGGGGGGGG//g' >{output.a};"
        "head -2 {input} | sed 's/GGGGGGGGGGGGGGGGGGGG//g' >{output.b}"



rule cdhit:
    input:
        "dimer/{seq}.trimmed"
    output:
        "pymodel/{seq}.cdhit"
    shell:
        "tmp=$$ ;"
	"sed 's/\-//g' {input}  > /tmp/$tmp.in.fa ;"
	"cd-hit -i /tmp/$tmp.in.fa -o /tmp/$tmp.out.fa -c 0.9   > {output};"
	"rm /tmp/$tmp.*"



rule stototrimmed:
    input:
        "msa/{seq}.sto"
    output:
        A3M="msa/{seq}.a3m",
        TRIMMED="dimer/{seq}.trimmed"
    shell:
        "{trRosettaPath}/reformat.pl -max 50000 -l 65534 -M first -r {input}  {output.A3M};"
	"cp {output.A3M} {output.TRIMMED}"




rule mergedfasta:
    input:
        "dimer/{seq}.trimmed"
    output:
        "dimer/{seq}.fa"
    shell:
        "head -2 {input}>{output}"


rule pdbnpz_new:
    input:
        "pdb/{seq}.pdb"
    output:
        "distpred/{seq}_pdb.npz"
    shell:
        "python3 {trRosettaPath}pdb_to_trRo.py -p {input} {output}"


# We hade to merge these rules to make it work.

rule makepdbfile:
    input:
       PDB1="pdb/{seqA}.pdb",
       PDB2="pdb/{seqB}.pdb",
    output:
       "pdb/{seqA}-{seqB}.pdb"
    shell:
       "python3 {trRosettaPath}joinchains.py  {input.PDB1}  {input.PDB2}  {output} "

rule analyzenosep:
    input:
       NPZ="distpred/{seq}.npz",
       FA="dimer/{seq}_nosep.fa",
       PDB="pdb/{seq}.pdb"
    output:
       ANALYZE="results/{seq}_nosep.analyze",
       PNG="results/{seq}_nosep.png"
    shell:
       "python3 {trRosettaPath}analyze_npz.py -i {input.NPZ} -s {input.FA} -p {input.PDB} -o {output.PNG} > {output.ANALYZE}"

rule analyze:
    input:
       NPZ="distpred/{seq}.npz",
       FA="dimer/{seq}.fa",
       PDB="pdb/{seq}.pdb"
    output:
       ANALYZE="results/{seq}.analyze",
       PNG="results/{seq}.png"
    shell:
       "python3 {trRosettaPath}analyze_npz.py -i {input.NPZ} -s {input.FA} -p {input.PDB} -o {output.PNG} > {output.ANALYZE}"

rule png_no_pdb:
    input:
       NPZ="distpred/{seq}.npz",
       FA="dimer/{seq}.fa",
    output:
       PNG="results/{seq}_nopdb.png"
    shell:
       "python3 {trRosettaPath}analyze_npz.py -i {input.NPZ} -s {input.FA}  -o {output.PNG} "

rule analyze_contact:
    input:
       NPZ="distpred/{seqA}-{seqB}_nosep.npz",
       STR1="pdb/{seqA}.pdb",
       STR2="pdb/{seqB}.pdb",
       SEQ1="seq/{seqA}.fasta"
    output:
       ANALYZE="results/{seqA}-{seqB}.auc",
       #     PNG="results/{seqA}-{seqB}-pr-curve.png", # This sometimes crash therefore is is ignored
    shell:
       "python3 {trRosettaPath}contact_prcurve.py -c {input.NPZ} -s1 {input.STR1} -s2 {input.STR2}  > {output.ANALYZE};"
       #"i=`basename  {input.STR1} .pdb | cut -c1-4`;"
       #"rm -f pr-curve_$i.png ;"
       #       "if [ -s pr-curve_$i.png ] ; then  mv pr-curve_$i.png {output.PNG} ; fi "


rule pconsdockpair:
    input:
       A="pymodel/{code}_u1_A-{code}_u2_A.pdb",
       B="pymodel/{code}_u2_A-{code}_u1_A.pdb"
    output:
       PDB="pymodel/{code}_u2_A-{code}_u1_A.pdb-reverse",
       A="pymodel/{code}_u2_A-{code}_u1_A.pconsdock",
       B="pymodel/{code}_u1_A-{code}_u2_A.pconsdock"
    shell:
       "pdb_selchain -B {input.B} | sed 's/ B / A /g' > {output.PDB}.tmp;"
       "pdb_selchain -A {input.B} | sed 's/ A / B /g'   >> {output.PDB}.tmp ;"
       "pdb_reres {output.PDB}.tmp  > {output.PDB};"
       "rm {output.PDB}.tmp;"
       "python3 {dockq} -short {input.A} {output.PDB} > {output.A};"      
       "python3 {dockq} -short {input.A} {output.PDB} > {output.B};"      

rule MMdockpair:
    input:
       A="pymodel/{code}_u1_A-{code}_u2_A.pdb",
       B="pymodel/{code}_u2_A-{code}_u1_A.pdb-reverse"
    output:
       A="pymodel/{code}_u2_A-{code}_u1_A.MMdock",
       B="pymodel/{code}_u1_A-{code}_u2_A.MMdock"
    shell:
       "{trRosettaPath}MMalign {input.A} {input.B}  > {output.A};"
       "{trRosettaPath}MMalign {input.B} {input.A}  > {output.B};"

rule pconsdockcomparison:
    input:
       DOCKQ="pymodel/{seq}.dockq",
       PCONS="pymodel/{seq}.pconsdock",
       MM="pymodel/{seq}.MMdock"
    output:
       "pymodel/{seq}.dockcsv"
    shell:
       "name=`basename {input.DOCKQ} .dockq`;"
       "d=`{gawk2} {input.DOCKQ}`;"
       "p=`{gawk2} {input.PCONS}`;"
       "m=`grep -e ^TM-score {input.MM} | {gawk2} | head -1`;"
       "echo name,dockQ,PconsDock,MMdock > {output};"
       "echo $name,$d,$p,$m >> {output}"


# This rule actually overwrites the rule for pconsdockpair
rule pconsdock:
    input:
       PDB="{dir}/{seqA}-{seqB}.pdb",
       pdb01="pymodel/{seqA}-{seqB}_01.pdb",
       pdb02="pymodel/{seqA}-{seqB}_02.pdb",
       pdb03="pymodel/{seqA}-{seqB}_03.pdb",
       pdb04="pymodel/{seqA}-{seqB}_04.pdb",
       pdb05="pymodel/{seqA}-{seqB}_05.pdb",
       #pdb06="pymodel/{seqA}-{seqB}_06.pdb",
       #pdb07="pymodel/{seqA}-{seqB}_07.pdb",
       #pdb08="pymodel/{seqA}-{seqB}_08.pdb",
       #pdb09="pymodel/{seqA}-{seqB}_09.pdb",
       #pdb10="pymodel/{seqA}-{seqB}_10.pdb",
       #pdb11="pymodel/{seqA}-{seqB}_11.pdb",
       #pdb12="pymodel/{seqA}-{seqB}_12.pdb",
       #pdb13="pymodel/{seqA}-{seqB}_13.pdb",
       #pdb14="pymodel/{seqA}-{seqB}_14.pdb",
       #pdb15="pymodel/{seqA}-{seqB}_15.pdb",
       #pdb16="pymodel/{seqA}-{seqB}_16.pdb",
       #pdb17="pymodel/{seqA}-{seqB}_17.pdb",
       #pdb18="pymodel/{seqA}-{seqB}_18.pdb",
       #pdb19="pymodel/{seqA}-{seqB}_19.pdb",
       #pdb20="pymodel/{seqA}-{seqB}_20.pdb"
    output:
       "{dir}/{seqA}-{seqB}.pconsdock5"
    shell:
       "{trRosettaPath}/pconsdock.bash  {input.PDB}  {input.pdb01}  {input.pdb02}  {input.pdb03}  {input.pdb04}  {input.pdb05}  {input.pdb06}  {input.pdb07}  {input.pdb08}  {input.pdb09}  {input.pdb10} {input.pdb11}  {input.pdb12}  {input.pdb13}  {input.pdb14}  {input.pdb15}  {input.pdb16}  {input.pdb17}  {input.pdb18}  {input.pdb19}  {input.pdb20}"

rule MMdock:
    input:
       PDB="{dir}/{seqA}-{seqB}.pdb",
       pdb01="pymodel/{seqA}-{seqB}_01.pdb",
       pdb02="pymodel/{seqA}-{seqB}_02.pdb",
       pdb03="pymodel/{seqA}-{seqB}_03.pdb",
       pdb04="pymodel/{seqA}-{seqB}_04.pdb",
       pdb05="pymodel/{seqA}-{seqB}_05.pdb",
       #pdb06="pymodel/{seqA}-{seqB}_06.pdb",
       #pdb07="pymodel/{seqA}-{seqB}_07.pdb",
       #pdb08="pymodel/{seqA}-{seqB}_08.pdb",
       #pdb09="pymodel/{seqA}-{seqB}_09.pdb",
       #pdb10="pymodel/{seqA}-{seqB}_10.pdb",
       #pdb11="pymodel/{seqA}-{seqB}_11.pdb",
       #pdb12="pymodel/{seqA}-{seqB}_12.pdb",
       #pdb13="pymodel/{seqA}-{seqB}_13.pdb",
       #pdb14="pymodel/{seqA}-{seqB}_14.pdb",
       #pdb15="pymodel/{seqA}-{seqB}_15.pdb",
       #pdb16="pymodel/{seqA}-{seqB}_16.pdb",
       #pdb17="pymodel/{seqA}-{seqB}_17.pdb",
       #pdb18="pymodel/{seqA}-{seqB}_18.pdb",
       #pdb19="pymodel/{seqA}-{seqB}_19.pdb",
       #pdb20="pymodel/{seqA}-{seqB}_20.pdb"
    output:
       "{dir}/{seqA}-{seqB}.MMdock5"
    shell:
       "{trRosettaPath}/mmdock.bash  {input.PDB}  {input.pdb01}  {input.pdb02}  {input.pdb03}  {input.pdb04}  {input.pdb05} "

rule dockq:
    input:
       MOD="{dir}/{seqA}-{seqB}.pdb",
       STR="pdb/{seqA}-{seqB}.pdb",
    output:
       DOCKQ="{dir}/{seqA}-{seqB}.dockq"
    shell:
       "python3 {dockq} -short {input.MOD} {input.STR} > {output.DOCKQ};"

rule TM:
    input:
       MOD="{dir}/{seqA}-{seqB}.pdb",
       STR1="pdb/{seqA}.pdb",
       STR2="pdb/{seqB}.pdb",
    output:
       TM="{dir}/{seqA}-{seqB}.tm",
       A="{dir}/{seqA}.{seqA}-{seqB}.PDB",
       B="{dir}/{seqB}.{seqA}-{seqB}.PDB"
    shell:
       "grep ^ATOM {input.MOD} | grep -w A > {output.A};"
       "grep ^ATOM {input.MOD} | grep -w B > {output.B};"
       "TMalign {input.STR1} {output.A}  > {output.TM};"
       "TMalign {input.STR2} {output.B}  >> {output.TM};"

rule TMsingle:
    input:
       MOD="single/{seqA}.pdb",
       STR1="pdb/{seqA}.pdb",
    output:
       TM="{dir}/{seqA}.tm",
    shell:
       "TMalign {input.STR1} {input.MOD}  > {output.TM};"

rule MM:
    input:
       MOD="{dir}/{seqA}-{seqB}.pdb",
       STR="pdb/{seqA}-{seqB}.pdb",
    output:
       MM="{dir}/{seqA}-{seqB}.mm"
    shell:
       "{trRosettaPath}MMalign {input.STR} {input.MOD}  > {output.MM};"



rule seqid:
    input:
       SEQA="seq/{seqA}.fasta",
       SEQB="seq/{seqB}.fasta",
    output:
       SEQID="{dir}/{seqA}-{seqB}.bl2seq"
    shell:
       "bl2seq -e 1000000000000000000000 -D 1 -p blastp -i  {input.SEQA}  -j {input.SEQB} -o {output.SEQID}"

rule hhalign:
    input:
       SEQA="msa/{seqA}.a3m",
       SEQB="msa/{seqB}.a3m",
    output:
       SEQID="{dir}/{seqA}-{seqB}.hhalign"
    shell:
       "hhalign -i  {input.SEQA}  -t {input.SEQB} -o {output.SEQID}"


rule rank:
   input:
       "pymodel/{seq}.pdb",
   output:
       "pymodel/{seq}.rank",
   shell:
       "echo {input} |  sed 's/.*_//g' | sed 's/\.pdb//g' > {output};"


rule csv:
    input:
       CDHIT="{dir}/{seqA}-{seqB}.cdhit",
       DOCKQ="{dir}/{seqA}-{seqB}.dockq",
       TM="{dir}/{seqA}-{seqB}.tm",
       MM="{dir}/{seqA}-{seqB}.mm",
       SEQA="seq/{seqA}.fasta",
       SEQB="seq/{seqB}.fasta",
       MSAA="msa/{seqA}.sto",
       MSAB="msa/{seqB}.sto",
       TRIMMED="dimer/{seqA}-{seqB}.trimmed",
       ANALYZE="results/{seqA}-{seqB}.analyze",
       #AUC="results/{seqA}-{seqB}.auc",
       SEQID="{dir}/{seqA}-{seqB}.bl2seq",
       HHALIGN="{dir}/{seqA}-{seqB}.hhalign",
       MMDOCK="{dir}/{seqA}-{seqB}.MMdock",
       PCONSDOCK="{dir}/{seqA}-{seqB}.pconsdock",
    output:
       CSV="{dir}/{seqA}-{seqB}.csv"
    shell:
       "name=`basename {input.TRIMMED} .trimmed`;"
       "rank=`echo {input.SEQA} | cut -c11-11`;"
       "lenA=`grep -v \> {input.SEQA} | wc -c`;"
       "lenB=`grep -v \> {input.SEQB} | wc -c`;"
       "msa=`grep -v \> {input.TRIMMED} | wc -l`;"
       "msaA=`grep -c =GS {input.MSAA} || echo "" `;"
       "msaB=`grep -c =GS {input.MSAB} || echo ""`;"
       "CDHIT=`grep clusters {input.CDHIT} | {gawk3}  `;"
       "dockQ=`{gawk2} {input.DOCKQ}  `;"
       "fnat=`{gawk4} {input.DOCKQ}  `;"
       "iRMS=`{gawk6} {input.DOCKQ}  `;"
       "LRMS=`{gawk8} {input.DOCKQ}  `;"
       "fnonnat=`{gawk10} {input.DOCKQ}  `;"
       "mm=`grep -e ^TM-score {input.MM} | {gawk2} | head -1`;"
       "tmA=`grep -e ^TM-score {input.TM} | {gawk2} | head -1`;"
       "tmB=`grep -e ^TM-score {input.TM} | {gawk2} | head -3 | tail -1`;"
       "long=`grep NumLongContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk8}`;"
       "longPPV=`grep LongPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "longA=`grep NumLongContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk6}`;"
       "longPPVA=`grep LongPPV {input.ANALYZE}  | sed 's/\]//g' | sed 's/\[//g' | {gawk5}`;"
       "longB=`grep NumLongContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "longPPVB=`grep LongPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk6}`;"
       "short=`grep NumShortContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk8}`;"
       "shortPPV=`grep ShortPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "shortA=`grep NumShortContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk6}`;"
       "shortPPVA=`grep ShortPPV {input.ANALYZE}  | sed 's/\]//g' | sed 's/\[//g' | {gawk5}`;"
       "shortB=`grep NumShortContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "shortPPVB=`grep ShortPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk6}`;"
       "shortMCC=`grep ShortMCC {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "medMCC=`grep MedMCC {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "longMCC=`grep LongMCC {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "shortF=`grep ShortF1 {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "medF=`grep MedF1 {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "longF=`grep LongF1 {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "longpdb=`grep NumLongContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk4}`;"
       "medpdb=`grep NumMediumContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk4}`;"
       "shortpdb=`grep NumShortContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk4}`;"
       "avprob=`grep AverageProb {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk8}`;"
       "med=`grep NumMediumContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk8}`;"
       "medPPV=`grep MedPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "medA=`grep NumMediumContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk6}`;"
       "medPPVA=`grep MedPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk5}`;"
       "medB=`grep NumMediumContacts {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk7}`;"
       "medPPVB=`grep MedPPV {input.ANALYZE} | sed 's/\]//g' | sed 's/\[//g' | {gawk6}`;"
       "evalue=`grep pdb {input.SEQID} |  head -2 | tail -1 | {gawk11if}`;"
       "seqid=`grep pdb {input.SEQID} |  head -2 | tail -1 | {gawk3if}`;"
       "hhprob=`grep pdb {input.HHALIGN} |  head -2 | tail -1 | {gawk3hh}`;"
       "hhevalue=`grep pdb {input.HHALIGN} |  head -2 | tail -1 | {gawk4hh}`;"
       "hhscore=`grep pdb {input.HHALIGN} |  head -2 | tail -1 | {gawk6hh}`;"
       #"auc=`grep -v \# {input.AUC} |  {gawk8}`;"
       #"auc=`grep  2.0A {input.AUC} |  {gawk5}`;"
       "pcons=`{gawk2} {input.PCONSDOCK}`;"
       "mmdock=`grep -e ^TM-score {input.MMDOCK} | {gawk2} | head -1`;"
       "echo name,JHparams,lenA,lenB,msa,msaA,msaB,cdhit,dockQ,fnat,iRMS,LRMS,fnonnat,mm,tmA,tmB,long,med,longPPV,medPPV,longA,medA,longPPVA,medPPVA,longB,medB,longPPVB,medPPVB,short,shortPPV,shortA,shortPPVA,shortB,shortPPVB,shortpdb,medpdb,longpdb,avprob,evalue,seqid,hhprob,hhevalue,hhscore,PconsDock,MMdock,shortMCC,medMCC,longMCC,shortF1,medF1,longF1,rank > {output.CSV};"
       "echo $name,{jhparams},$lenA,$lenB,$msa,$msaA,$msaB,$CDHIT,$dockQ,$fnat,$iRMS,$LRMS,$fnonnat,$mm,$tmA,$tmB,$long,$med,$longPPV,$medPPV,$longA,$medA,$longPPVA,$medPPVA,$longB,$medB,$longPPVB,$medPPVB,$short,$shortPPV,$shortA,$shortPPVA,$shortB,$shortPPVB,$shortpdb,$medpdb,$longpdb,$avprob,$evalue,$seqid,$hhprob,$hhevalue,$hhscore,$pcons,$mmdock,$shortMCC,$medMCC,$longMCC,$shortF,$medF,$longF,$rank >> {output.CSV}"

rule summary:  # I do not know how to make this depend on the *.csv files. Just rerun when needed
     input:
        "pymodel/"
     output:
        "results/summary.csv"
     shell:
        "echo name,JHparams,lenA,lenB,msa,msaA,msaB,cdhit,dockQ,fnat,iRMS,LRMS,fnonnat,mm,tmA,tmB,long,med,longPPV,medPPV,longA,medA,longPPVA,medPPVA,longB,medB,longPPVB,medPPVB,short,shortPPV,shortA,shortPPVA,shortB,shortPPVB,shortpdb,medpdb,longpdb,avprob,auc,evalue,seqid,hhprob,hhevalue,hhscore,PconsDock,MMdock,rank > {output};"
        "for i in pymodel/*.csv ; do tail -1 $i | sed s/NA/0./g >> {output} ; done ;"
        "for i in */pymodel/*.csv ; do tail -1 $i| sed s/NA/0./g   >> {output} ; done"




rule deletelinker:
    input:
       NPZ="distpred/{seqA}-{seqB}.npz",
       FA="seq/{seqA}.fasta"
    output:
        "distpred/{seqA}-{seqB}_nosep.npz"
    shell:
        "python3 {trRosettaPath}/del_sepseq_npz.py  -i {input.NPZ} -s {input.FA} -o {output}"

rule mergenpz:
     input:
       i="distpred/{seqA}.npz",
       j="distpred/{seqB}.npz",
       k="distpred/{seqA}-{seqB}_nosep.npz",
     output:
       o="distpred/{seqA}-{seqB}_merged.npz",
     shell:
       "python3 {trRosettaPath}/merge_npz.py -i {input.i} -j {input.j} -k {input.k} -o {output.o}"

rule mergepdbnpz: # We will start using this from Sep 18 2020 for pdb
     input:
       i="distpred/{seqA}_pdb.npz",
       j="distpred/{seqB}_pdb.npz",
       k="distpred/{seqA}-{seqB}_nosep.npz",
     output:
       o="distpred/{seqA}-{seqB}_merged_pdb.npz",
     shell:
       "python3 {trRosettaPath}/merge_npz.py -i {input.i} -j {input.j} -k {input.k} -o {output.o}"



